[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Linear Algebra",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books. Knuth (1984).\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Introduction to Computational Linear Algebra\nതസ്മാത് കര്‍മണ്യവാധികാരസ്തേ മാ ഫലെഷു കദാചനം। മാ കര്‍മഫലഹേതുര്‍ഭൂര്‍മാ തെ സങ്കോऽസ്ത്വകര്‍മ്മണി।।\nWelcome to the Computational Linear Algebra course, a pivotal component of our Computational Mathematics for Engineering minor program. This course is meticulously designed to connect theoretical linear algebra concepts with their practical applications in Artificial Intelligence (AI) and Data Science.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#introduction-to-computational-linear-algebra",
    "href": "intro.html#introduction-to-computational-linear-algebra",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1.1 Course Themes\n\nPractical Application Proficiency\n\nOur primary focus is on seamlessly translating theoretical concepts into practical solutions for real-world challenges.\nDevelop robust problem-solving skills applicable to AI, Data Science, and advanced engineering scenarios.\n\nMathematical Expertise for Data Insights\n\nGain in-depth proficiency in computational linear algebra, covering essential topics like matrix operations, eigendecomposition, and singular value decomposition.\nLeverage linear algebra techniques to derive meaningful insights and make informed decisions in data science applications.\n\nHands-On Learning\n\nEngage in immersive, project-based learning experiences with a strong emphasis on Python implementation.\nApply linear algebra principles to practical problems, including linear regression, principal component analysis (PCA), and neural networks.\n\n\n\n\n1.1.2 Relevance and Impact\nIn today’s technology-driven landscape, linear algebra forms the backbone of many critical algorithms and applications in AI and Data Science. This course will not only enhance your analytical and computational skills but also prepare you to address complex engineering problems with confidence.\nBy the end of this course, you will have acquired a comprehensive understanding of the role of linear algebra in computational mathematics and its practical applications. This knowledge will equip you with the tools necessary to excel in the rapidly evolving tech industry.\nLet us start this educational journey together, where theoretical knowledge meets practical application, and explore the fascinating and impactful world of Computational Linear Algebra.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "module_1.html",
    "href": "module_1.html",
    "title": "2  Python for Linear Algebra",
    "section": "",
    "text": "2.1 Pseudocode: the new language for algorithm design\nPseudocode is a way to describe algorithms in a structured but plain language. It helps in planning the logic without worrying about the syntax of a specific programming language. In this module, we’ll use Python-flavored pseudocode to describe various matrix operations.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#pseudocode-the-new-language-for-algorithm-design",
    "href": "module_1.html#pseudocode-the-new-language-for-algorithm-design",
    "title": "2  Python for Linear Algebra",
    "section": "",
    "text": "Caution\n\n\n\nThere are varities of approaches in writing pseudocode. Students can adopt any of the standard approach to write pseudocode.\n\n\n\n2.1.1 Matrix Sum\nMathematical Procedure:\nTo add two matrices \\(A\\) and \\(B\\), both matrices must have the same dimensions. The sum \\(C\\) of two matrices \\(A\\) and \\(B\\) is calculated element-wise:\n\\[C[i][j] = A[i][j] + B[i][j]\\]\nExample:\nLet $ A $ and $ B $ be two $ 2 $ matrices:\n\\[ A = \\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 5 & 6 \\\\ 7 & 8 \\end{bmatrix} \\]\nThe sum \\(C\\) is:\n\\[ C = A + B = \\begin{bmatrix} 1+5 & 2+6 \\\\ 3+7 & 4+8 \\end{bmatrix} = \\begin{bmatrix} 6 & 8 \\\\ 10 & 12 \\end{bmatrix} \\]\nPseudocode:\nFUNCTION matrix_sum(A, B):\n    Get the number of rows and columns in matrix A\n    Create an empty matrix C with the same dimensions\n    FOR each row i:\n        FOR each column j:\n            Set C[i][j] to the sum of A[i][j] and B[i][j]\n    RETURN the matrix C\nEND FUNCTION\nExplanation:\n\nDetermine the number of rows and columns in matrix \\(A\\).\nCreate a new matrix \\(C\\) with the same dimensions.\nLoop through each element of the matrices and add corresponding elements.\nReturn the resulting matrix \\(C\\).\n\n\n\n2.1.2 Matrix Difference\nMathematical Procedure:\nTo subtract matrix \\(B\\) from matrix \\(A\\), both matrices must have the same dimensions. The difference \\(C\\) of two matrices \\(A\\) and \\(B\\) is calculated element-wise:\n\\[ C[i][j] = A[i][j] - B[i][j] \\]\nExample:\nLet \\(A\\) and \\(B\\) be two \\(2 \\times 2\\) matrices:\n\\[ A = \\begin{bmatrix} 9 & 8 \\\\ 7 & 6 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix} \\]\nThe difference $ C $ is:\n\\[ C = A - B = \\begin{bmatrix} 9-1 & 8-2 \\\\ 7-3 & 6-4 \\end{bmatrix} = \\begin{bmatrix} 8 & 6 \\\\ 4 & 2 \\end{bmatrix} \\]\nPseudocode:\nFUNCTION matrix_difference(A, B):\n    # Determine the number of rows and columns in matrix A\n    rows = number_of_rows(A)\n    cols = number_of_columns(A)\n    \n    # Create an empty matrix C with the same dimensions as A and B\n    C = create_matrix(rows, cols)\n    \n    # Iterate through each row\n    FOR i FROM 0 TO rows-1:\n        # Iterate through each column\n        FOR j FROM 0 TO cols-1:\n            # Calculate the difference for each element and store it in C\n            C[i][j] = A[i][j] - B[i][j]\n    \n    # Return the result matrix C\n    RETURN C\nEND FUNCTION\nIn more human readable format the above pseudocode can be written as:\nFUNCTION matrix_difference(A, B):\n    Get the number of rows and columns in matrix A\n    Create an empty matrix C with the same dimensions\n    FOR each row i:\n        FOR each column j:\n            Set C[i][j] to the difference of A[i][j] and B[i][j]\n    RETURN the matrix C\nEND FUNCTION\nExplanation:\n\nDetermine the number of rows and columns in matrix \\(A\\).\nCreate a new matrix \\(C\\) with the same dimensions.\nLoop through each element of the matrices and subtract corresponding elements.\nReturn the resulting matrix \\(C\\).\n\n\n\n2.1.3 Matrix Product\nMathematical Procedure:\nTo find the product of two matrices \\(A\\) and \\(B\\), the number of columns in \\(A\\) must be equal to the number of rows in \\(B\\). The element \\(C[i][j]\\) in the product matrix \\(C\\) is computed as:\n\\[C[i][j] = \\sum_{k} A[i][k] \\cdot B[k][j]\\]\nExample:\nLet \\(A\\) be a \\(2 \\times 3\\) matrix and \\(B\\) be a \\(3 \\times 2\\) matrix:\n\\[A = \\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 7 & 8 \\\\ 9 & 10 \\\\ 11 & 12 \\end{bmatrix}\\]\nThe product \\(C\\) is:\n\\[C = A \\cdot B = \\begin{bmatrix} 58 & 64 \\\\ 139 & 154 \\end{bmatrix}\\]\nPseudocode:\nFUNCTION matrix_product(A, B):\n    # Get the dimensions of A and B\n    rows_A = number_of_rows(A)\n    cols_A = number_of_columns(A)\n    rows_B = number_of_rows(B)\n    cols_B = number_of_columns(B)\n    \n    # Check if multiplication is possible\n    IF cols_A != rows_B:\n        RAISE Error(\"Incompatible matrix dimensions\")\n    \n    # Initialize result matrix C\n    C = create_matrix(rows_A, cols_B)\n    \n    # Calculate matrix product\n    FOR each row i FROM 0 TO rows_A-1:\n        FOR each column j FROM 0 TO cols_B-1:\n            # Compute the sum for C[i][j]\n            sum = 0\n            FOR each k FROM 0 TO cols_A-1:\n                sum = sum + A[i][k] * B[k][j]\n            C[i][j] = sum\n    \n    RETURN C\nEND FUNCTION\nA more humar readable version of the pseudocode is shown below:\nFUNCTION matrix_product(A, B):\n    Get the number of rows and columns in matrix A\n    Get the number of columns in matrix B\n    Create an empty matrix C with dimensions rows_A x cols_B\n    FOR each row i in A:\n        FOR each column j in B:\n            Initialize C[i][j] to 0\n            FOR each element k in the common dimension:\n                Add the product of A[i][k] and B[k][j] to C[i][j]\n    RETURN the matrix C\nEND FUNCTION\nExplanation:\n\nDetermine the number of rows and columns in matrices \\(A\\) and \\(B\\).\nCreate a new matrix \\(C\\) with dimensions \\(\\text{rows}(A)\\times \\text{columns}(B)\\).\nLoop through each element of the resulting matrix \\(C[i][j]\\) and calculate the dot product of \\(i\\) the row of \\(A\\) to \\(j\\) th column of \\(B\\) for each element.\nReturn the resulting matrix \\(C\\).\n\n\n\n2.1.4 Determinant\nMathematical Procedure:\nTo find the determinant of a square matrix \\(A\\), we can use the Laplace expansion, which involves breaking the matrix down into smaller submatrices. For a \\(2 \\times 2\\) matrix, the determinant is calculated as:\n\\[\\text{det}(A) = A[0][0] \\cdot A[1][1] - A[0][1] \\cdot A[1][0]\\]\nFor larger matrices, the determinant is calculated recursively.\nExample:\nLet \\(A\\) be a \\(2 \\times 2\\) matrix:\n\\[A = \\begin{bmatrix} 4 & 3 \\\\ 6 & 3 \\end{bmatrix}\\]\nThe determinant of \\(A\\) is:\n\\[\\text{det}(A) = (4 \\cdot 3) - (3 \\cdot 6) = 12 - 18 = -6\\]\nPseudocode:\nFUNCTION determinant(A):\n    # Step 1: Get the size of the matrix\n    n = number_of_rows(A)\n    \n    # Base case for a 2x2 matrix\n    IF n == 2:\n        RETURN A[0][0] * A[1][1] - A[0][1] * A[1][0]\n    \n    # Step 2: Initialize determinant to 0\n    det = 0\n    \n    # Step 3: Loop through each column of the first row\n    FOR each column j FROM 0 TO n-1:\n        # Get the submatrix excluding the first row and current column\n        submatrix = create_submatrix(A, 0, j)\n        # Recursive call to determinant\n        sub_det = determinant(submatrix)\n        # Alternating sign and adding to the determinant\n        det = det + ((-1) ^ j) * A[0][j] * sub_det\n    \n    RETURN det\nEND FUNCTION\nA human readable version of the same pseudocode is shown below:\nFUNCTION determinant(A):\n    IF the size of A is 2x2:\n        RETURN the difference between the product of the diagonals\n    END IF\n    Initialize det to 0\n    FOR each column c in the first row:\n        Create a sub_matrix by removing the first row and column c\n        Add to det: the product of (-1)^c, the element A[0][c], and the determinant of the sub_matrix\n    RETURN det\nEND FUNCTION\n\nFUNCTION create_sub_matrix(A, row, col):\n    Create an empty sub_matrix with dimensions one less than A\n    Set sub_i to 0\n    FOR each row i in A:\n        IF i is the row to be removed:\n            CONTINUE to the next row\n        Set sub_j to 0\n        FOR each column j in A:\n            IF j is the column to be removed:\n                CONTINUE to the next column\n            Copy the element A[i][j] to sub_matrix[sub_i][sub_j]\n            Increment sub_j\n        Increment sub_i\n    RETURN sub_matrix\nEND FUNCTION\nExplanation:\n\nIf the matrix is \\(2×2\\), calculate the determinant directly.\nFor larger matrices, use the Laplace expansion to recursively calculate the determinant.\nCreate submatrices by removing the current row and column.\nSum the determinants of the submatrices, adjusted for the sign and the current element.\n\n\n\n2.1.5 Rank of a Matrix\nMathematical Procedure:\nThe rank of a matrix \\(A\\) is the maximum number of linearly independent rows or columns in \\(A\\). This can be found using Gaussian elimination to transform the matrix into its row echelon form (REF) and then counting the number of non-zero rows.\nExample:\nLet \\(A\\) be a \\(3 \\times 3\\) matrix:\n\\[A = \\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 \\end{bmatrix}\\]\nAfter performing Gaussian elimination, we obtain:\n\\[\\text{REF}(A) = \\begin{bmatrix} 1 & 2 & 3 \\\\ 0 & -3 & -6 \\\\ 0 & 0 & 0 \\end{bmatrix}\\]\nThe rank of \\(A\\) is the number of non-zero rows, which is 2.\nPseudocode:\nFUNCTION matrix_rank(A):\n    # Step 1: Get the dimensions of the matrix\n    rows = number_of_rows(A)\n    cols = number_of_columns(A)\n    \n    # Step 2: Transform the matrix to row echelon form\n    row_echelon_form(A, rows, cols)\n    \n    # Step 3: Count non-zero rows\n    rank = 0\n    FOR each row i FROM 0 TO rows-1:\n        non_zero = FALSE\n        FOR each column j FROM 0 TO cols-1:\n            IF A[i][j] != 0:\n                non_zero = TRUE\n                BREAK\n        IF non_zero:\n            rank = rank + 1\n    \n    RETURN rank\nEND FUNCTION\n\nFUNCTION row_echelon_form(A, rows, cols):\n    # Perform Gaussian elimination\n    lead = 0\n    FOR r FROM 0 TO rows-1:\n        IF lead &gt;= cols:\n            RETURN\n        i = r\n        WHILE A[i][lead] == 0:\n            i = i + 1\n            IF i == rows:\n                i = r\n                lead = lead + 1\n                IF lead == cols:\n                    RETURN\n        # Swap rows i and r\n        swap_rows(A, i, r)\n        # Make A[r][lead] = 1\n        lv = A[r][lead]\n        A[r] = [m / float(lv) for m in A[r]]\n        # Make all rows below r have 0 in column lead\n        FOR i FROM r + 1 TO rows-1:\n            lv = A[i][lead]\n            A[i] = [iv - lv * rv for rv, iv in zip(A[r], A[i])]\n        lead = lead + 1\nEND FUNCTION\n\nFUNCTION swap_rows(A, row1, row2):\n    temp = A[row1]\n    A[row1] = A[row2]\n    A[row2] = temp\nEND FUNCTION\nA more human readable version of the above pseudocode is shown below:\nFUNCTION rank(A):\n    Get the number of rows and columns in matrix A\n    Initialize the rank to 0\n    FOR each row i in A:\n        IF the element in the current row and column is non-zero:\n            Increment the rank\n            FOR each row below the current row:\n                Calculate the multiplier to zero out the element below the diagonal\n                Subtract the appropriate multiple of the current row from each row below\n        ELSE:\n            Initialize a variable to track if a swap is needed\n            FOR each row below the current row:\n                IF a non-zero element is found in the current column:\n                    Swap the current row with the row having the non-zero element\n                    Set the swap variable to True\n                    BREAK the loop\n            IF no swap was made:\n                Decrement the rank\n    RETURN the rank\nEND FUNCTION\nExplanation:\n\nInitialize the rank to 0.\nLoop through each row of the matrix.\nIf the diagonal element is non-zero, increment the rank and perform row operations to zero out the elements below the diagonal.\nIf the diagonal element is zero, try to swap with a lower row that has a non-zero element in the same column.\nIf no such row is found, decrement the rank.\nReturn the resulting rank of the matrix.\n\n\n\n2.1.6 Solving a System of Equations\nMathematical Procedure:\nTo solve a system of linear equations represented as \\(A \\mathbf{x} = \\mathbf{b}\\), where\\(A\\) is the coefficient matrix, \\(\\mathbf{x}\\) is the vector of variables, and\\(\\mathbf{b}\\) is the constant vector, we can use Gaussian elimination to transform the augmented matrix \\([A | \\mathbf{b}]\\) into its row echelon form (REF) and then perform back substitution to find the solution vector \\(\\mathbf{x}\\).\nExample:\nConsider the system of equations:\n\\[\\begin{cases}\nx + 2y + 3z &= 9 \\\\\n4x + 5y + 6z& = 24 \\\\\n7x + 8y + 9z& = 39\n\\end{cases}\\]\nThe augmented matrix is:\n\\[[A | \\mathbf{b}] = \\begin{bmatrix} 1 & 2 & 3 & | & 9 \\\\ 4 & 5 & 6 & | & 24 \\\\ 7 & 8 & 9 & | & 39 \\end{bmatrix}\\]\nAfter performing Gaussian elimination on the augmented matrix, we get:\n\\[\\text{REF}(A) = \\begin{bmatrix} 1 & 2 & 3 & | & 9 \\\\ 0 & -3 & -6 & | & -12 \\\\ 0 & 0 & 0 & | & 0 \\end{bmatrix}\\]\nPerforming back substitution, we solve for \\(z\\),\\(y\\), and \\(x\\):\n\\[\\begin{cases}\nz = 1 \\\\\ny = 0 \\\\\nx = 3\n\\end{cases}\\]\nTherefore, the solution vector is \\(\\mathbf{x} = \\begin{bmatrix} 3 \\\\ 0 \\\\ 1 \\end{bmatrix}\\).\nPseudocode:\nFUNCTION solve_system_of_equations(A, b):\n    # Step 1: Get the dimensions of the matrix\n    rows = number_of_rows(A)\n    cols = number_of_columns(A)\n    \n    # Step 2: Create the augmented matrix\n    augmented_matrix = create_augmented_matrix(A, b)\n    \n    # Step 3: Transform the augmented matrix to row echelon form\n    row_echelon_form(augmented_matrix, rows, cols)\n    \n    # Step 4: Perform back substitution\n    solution = back_substitution(augmented_matrix, rows, cols)\n    \n    RETURN solution\nEND FUNCTION\n\nFUNCTION create_augmented_matrix(A, b):\n    # Combine A and b into an augmented matrix\n    augmented_matrix = []\n    FOR i FROM 0 TO number_of_rows(A)-1:\n        augmented_matrix.append(A[i] + [b[i]])\n    RETURN augmented_matrix\nEND FUNCTION\n\nFUNCTION row_echelon_form(augmented_matrix, rows, cols):\n    # Perform Gaussian elimination\n    lead = 0\n    FOR r FROM 0 TO rows-1:\n        IF lead &gt;= cols:\n            RETURN\n        i = r\n        WHILE augmented_matrix[i][lead] == 0:\n            i = i + 1\n            IF i == rows:\n                i = r\n                lead = lead + 1\n                IF lead == cols:\n                    RETURN\n        # Swap rows i and r\n        swap_rows(augmented_matrix, i, r)\n        # Make augmented_matrix[r][lead] = 1\n        lv = augmented_matrix[r][lead]\n        augmented_matrix[r] = [m / float(lv) for m in augmented_matrix[r]]\n        # Make all rows below r have 0 in column lead\n        FOR i FROM r + 1 TO rows-1:\n            lv = augmented_matrix[i][lead]\n            augmented_matrix[i] = [iv - lv * rv for rv, iv in zip(augmented_matrix[r], augmented_matrix[i])]\n        lead = lead + 1\nEND FUNCTION\n\nFUNCTION back_substitution(augmented_matrix, rows, cols):\n    # Initialize the solution vector\n    solution = [0 for _ in range(rows)]\n    # Perform back substitution\n    FOR i FROM rows-1 DOWNTO 0:\n        solution[i] = augmented_matrix[i][cols-1]\n        FOR j FROM i+1 TO cols-2:\n            solution[i] = solution[i] - augmented_matrix[i][j] * solution[j]\n    RETURN solution\nEND FUNCTION\n\nFUNCTION swap_rows(matrix, row1, row2):\n    temp = matrix[row1]\n    matrix[row1] = matrix[row2]\n    matrix[row2] = temp\nEND FUNCTION\nExplanation:\n\nAugment the coefficient matrix \\(A\\) with the constant matrix \\(B\\).\nPerform Gaussian elimination to reduce the augmented matrix to row echelon form.\nBack-substitute to find the solution vector \\(X\\).\nReturn the solution vector \\(X\\).\n\n\n\n2.1.7 Review Problems\nQ1: Fill in the missing parts of the pseudocode to yield a meaningful algebraic operation on of two matrices.\nPseudocode:\nFUNCTION matrix_op1(A, B):\n    rows = number_of_rows(A)\n    cols = number_of_columns(A)\n    result = create_matrix(rows, cols, 0)\n    \n    FOR i FROM 0 TO rows-1:\n        FOR j FROM 0 TO cols-1:\n            result[i][j] = A[i][j] + ---\n    \n    RETURN result\nEND FUNCTION\nQ2: Write the pseudocode to get useful derivable from a given a matrix by fill in the missing part.\nPseudocode:\nFUNCTION matrix_op2(A):\n    rows = number_of_rows(A)\n    cols = number_of_columns(A)\n    result = create_matrix(cols, rows, 0)\n    \n    FOR i FROM 0 TO rows-1:\n        FOR j FROM 0 TO cols-1:\n            result[j][i] = A[i][--]\n    \n    RETURN result\nEND FUNCTION",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#transition-from-pseudocode-to-python-programming",
    "href": "module_1.html#transition-from-pseudocode-to-python-programming",
    "title": "2  Python for Linear Algebra",
    "section": "2.2 Transition from Pseudocode to Python Programming",
    "text": "2.2 Transition from Pseudocode to Python Programming\nIn this course, our initial approach to understanding and solving linear algebra problems has been through pseudocode. Pseudocode allows us to focus on the logical steps and algorithms without getting bogged down by the syntax of a specific programming language. This method helps us build a strong foundation in the computational aspects of linear algebra.\nHowever, to fully leverage the power of computational tools and prepare for real-world applications, it is essential to implement these algorithms in a practical programming language. Python is a highly versatile and widely-used language in the fields of data science, artificial intelligence, and engineering. By transitioning from pseudocode to Python, we align with the following course objectives:\n\nPractical Implementation: Python provides numerous libraries and tools, such as NumPy and SciPy, which are specifically designed for numerical computations and linear algebra. Implementing our algorithms in Python allows us to perform complex calculations efficiently and accurately.\nHands-On Experience: Moving to Python programming gives students hands-on experience in coding, debugging, and optimizing algorithms. This practical experience is crucial for developing the skills required in modern computational tasks.\nIndustry Relevance: Python is extensively used in industry for data analysis, machine learning, and scientific research. Familiarity with Python and its libraries ensures that students are well-prepared for internships, research projects, and future careers in these fields.\nIntegration with Other Tools: Python’s compatibility with various tools and platforms allows for seamless integration into larger projects and workflows. This integration is vital for tackling real-world problems that often require multi-disciplinary approaches.\nEnhanced Learning: Implementing algorithms in Python helps reinforce theoretical concepts by providing immediate feedback through code execution and results visualization. This iterative learning process deepens understanding and retention of the material.\n\nBy transitioning to Python programming, we not only achieve our course objectives but also equip students with valuable skills that are directly applicable to their academic and professional pursuits.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#python-fundamentals",
    "href": "module_1.html#python-fundamentals",
    "title": "2  Python for Linear Algebra",
    "section": "2.3 Python Fundamentals",
    "text": "2.3 Python Fundamentals\n\n2.3.1 Python Programming Overview\nPython is a high-level, interpreted programming language that was created by Guido van Rossum and first released in 1991. Its design philosophy emphasizes code readability and simplicity, making it an excellent choice for both beginners and experienced developers. Over the years, Python has undergone significant development and improvement, with major releases adding new features and optimizations. The language’s versatility and ease of use have made it popular in various domains, including web development, data science, artificial intelligence, scientific computing, automation, and more. Python’s extensive standard library and active community contribute to its widespread adoption, making it one of the most popular programming languages in the world today.\n\n\n2.3.2 Variables\nIn Python, variables are used to store data that can be used and manipulated throughout a program. Variables do not need explicit declaration to reserve memory space. The declaration happens automatically when a value is assigned to a variable.\nBasic Input/Output Functions\nPython provides built-in functions for basic input and output operations. The print() function is used to display output, while the input() function is used to take input from the user.\nOutput with print() function\n\nExample 1\n\n# Printing text\nprint(\"Hello, World!\")\n\n# Printing multiple values\nx = 5\ny = 10\nprint(\"The value of x is:\", x, \"and the value of y is:\", y)\n\nExample 2\n\n# Assigning values to variables\na = 10\nb = 20.5\nname = \"Alice\"\n\n# Printing the values\nprint(\"Values Stored in the Variables:\")\nprint(a)\nprint(b)\nprint(name)\nInput with input() Function:\n# Taking input from the user\nname = input(\"Enter usr name: \")\nprint(\"Hello, \" + name + \"!\")\n\n# Taking numerical input\nage = int(input(\"Enter usr age: \"))\nprint(\"us are\", age, \"years old.\")\n\n\n\n\n\n\nNote\n\n\n\nThe print() function in Python, defined in the built-in __builtin__ module, is used to display output on the screen, providing a simple way to output text and variable values to the console.\n\n\nCombining Variables and Input/Output\nus can combine variables and input/output functions to create interactive programs.\n\nExample:\n\n# Program to calculate the sum of two numbers\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Calculate sum\nsum = num1 + num2\n\n# Display the result\nprint(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n\n\n2.3.3 Python Programming Style\n\n2.3.3.1 Indentation\nPython uses indentation to define the blocks of code. Proper indentation is crucial as it affects the program’s flow. Use 4 spaces per indentation level.\nif a &gt; b:\n    print(\"a is greater than b\")\nelse:\n    print(\"b is greater than or equal to a\")\n\n\n2.3.3.2 Comments\nUse comments to explain usr code. Comments begin with the # symbol and extend to the end of the line. Write comments that are clear and concise. See the example:\n# This is a comment\na = 10  # This is an inline comment\n\n\n2.3.3.3 Variable Naming\nUse meaningful variable names to make usr code more understandable. Variable names should be in lowercase with words separated by underscores.\nstudent_name = \"John\"\ntotal_score = 95\n\n\n2.3.3.4 Consistent Style\nFollow the PEP 8 style guide for Python code to maintain consistency and readability. Use blank lines to separate different sections of usr code. See the following example of function definition:\n\ndef calculate_sum(x, y):\n    return x + y\n\nresult = calculate_sum(5, 3)\nprint(result)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#basic-datatypes-in-python",
    "href": "module_1.html#basic-datatypes-in-python",
    "title": "2  Python for Linear Algebra",
    "section": "2.4 Basic Datatypes in Python",
    "text": "2.4 Basic Datatypes in Python\nIn Python, a datatype is a classification that specifies which type of value a variable can hold. Understanding datatypes is essential as it helps in performing appropriate operations on variables. Python supports various built-in datatypes, which can be categorized into several groups.\n\n2.4.1 Numeric Types\nNumeric types represent data that consists of numbers. Python has three distinct numeric types:\n\nIntegers (int):\n\nWhole numbers, positive or negative, without decimals.\nExample: a = 10, b = -5.\n\nFloating Point Numbers (float):\n\nNumbers that contain a decimal point.\nExample: pi = 3.14, temperature = -7.5.\n\nComplex Numbers (complex):\n\nNumbers with a real and an imaginary part.\nExample: z = 3 + 4j.\n\n\n# Examples of numeric types\na = 10         # Integer\npi = 3.14      # Float\nz = 3 + 4j     # Complex\n\n\n2.4.2 Sequence Types\nSequence types are used to store multiple items in a single variable. Python has several sequence types, including:\n\n2.4.2.1 String Type\nStrings in Python are sequences of characters enclosed in quotes. They are used to handle and manipulate textual data.\nCharacteristics of Strings\n\nOrdered: Characters in a string have a defined order.\nImmutable: Strings cannot be modified after they are created.\nHeterogeneous: Strings can include any combination of letters, numbers, and symbols.\n\nCreating Strings\nStrings can be created using single quotes, double quotes, or triple quotes for multiline strings.\n\nExample:\n\n# Creating strings with different types of quotes\nsingle_quoted = 'Hello, World!'\ndouble_quoted = \"Hello, World!\"\nmultiline_string = \"\"\"This is a\nmultiline string\"\"\"\nAccessing String Characters\nCharacters in a string are accessed using their index, with the first character having an index of 0. Negative indexing can be used to access characters from the end.\n\nExample:\n\n# Accessing characters in a string\nfirst_char = single_quoted[0]  # Output: 'H'\nlast_char = single_quoted[-1]  # Output: '!'\nCommon String Methods\nPython provides various methods for string manipulation:\n\nupper(): Converts all characters to uppercase.\nlower(): Converts all characters to lowercase.\nstrip(): Removes leading and trailing whitespace.\nreplace(old, new): Replaces occurrences of a substring with another substring.\nsplit(separator): Splits the string into a list based on a separator.\n\n\nExample:\n\n# Using string methods\ntext = \"   hello, world!   \"\nuppercase_text = text.upper()       # Result: \"   HELLO, WORLD!   \"\nstripped_text = text.strip()        # Result: \"hello, world!\"\nreplaced_text = text.replace(\"world\", \"Python\")  # Result: \"   hello, Python!   \"\nwords = text.split(\",\")             # Result: ['hello', ' world!   ']\n\n\n2.4.2.2 List Type\nLists are one of the most versatile and commonly used sequence types in Python. They allow for the storage and manipulation of ordered collections of items.\n\nCharacteristics of Lists\n\n\nOrdered: The items in a list have a defined order, which will not change unless explicitly modified.\nMutable: The content of a list can be changed after its creation (i.e., items can be added, removed, or modified).\nDynamic: Lists can grow or shrink in size as items are added or removed.\nHeterogeneous: Items in a list can be of different data types (e.g., integers, strings, floats).\n\nCreating Lists\nLists are created by placing comma-separated values inside square brackets.\n\nExample:\n\n# Creating a list of fruits\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Creating a mixed list\nmixed_list = [1, \"Hello\", 3.14]\nAccessing List Items\nList items are accessed using their index, with the first item having an index of 0.\n\nExample:\n\n\n# Accessing the first item\nfirst_fruit = fruits[0]  # Output: \"apple\"\n\n# Accessing the last item\nlast_fruit = fruits[-1]  # Output: \"cherry\"\nModifying Lists\nLists can be modified by changing the value of specific items, adding new items, or removing existing items.\n\nExample:\n\n# Changing the value of an item\nfruits[1] = \"blueberry\"  # fruits is now [\"apple\", \"blueberry\", \"cherry\"]\n\n# Adding a new item\nfruits.append(\"orange\")  # fruits is now [\"apple\", \"blueberry\", \"cherry\", \"orange\"]\n\n# Removing an item\nfruits.remove(\"blueberry\")  # fruits is now [\"apple\", \"cherry\", \"orange\"]\nList Methods\nPython provides several built-in methods to work with lists:\n\nappend(item): Adds an item to the end of the list.\ninsert(index, item): Inserts an item at a specified index.\nremove(item): Removes the first occurrence of an item.\npop(index): Removes and returns the item at the specified index.\nsort(): Sorts the list in ascending order.\nreverse(): Reverses the order of the list.\n\n\nExample:\n\n# Using list methods\nnumbers = [5, 2, 9, 1]\n\nnumbers.append(4)     # numbers is now [5, 2, 9, 1, 4]\nnumbers.sort()        # numbers is now [1, 2, 4, 5, 9]\nnumbers.reverse()     # numbers is now [9, 5, 4, 2, 1]\nfirst_number = numbers.pop(0)  # first_number is 9, numbers is now [5, 4, 2, 1]\n\n\n2.4.2.3 Tuple Type\nTuples are a built-in sequence type in Python that is used to store an ordered collection of items. Unlike lists, tuples are immutable, which means their contents cannot be changed after creation.\nCharacteristics of Tuples\n\nOrdered: Tuples maintain the order of items, which is consistent throughout their lifetime.\nImmutable: Once a tuple is created, its contents cannot be modified. This includes adding, removing, or changing items.\nFixed Size: The size of a tuple is fixed; it cannot grow or shrink after creation.\nHeterogeneous: Tuples can contain items of different data types, such as integers, strings, and floats.\n\nCreating Tuples\nTuples are created by placing comma-separated values inside parentheses. Single-element tuples require a trailing comma.\n\nExample:\n\n# Creating a tuple with multiple items\ncoordinates = (10, 20, 30)\n\n# Creating a single-element tuple\nsingle_element_tuple = (5,)\n\n# Creating a tuple with mixed data types\nmixed_tuple = (1, \"Hello\", 3.14)\nAccessing Tuple Items\nTuple items are accessed using their index, with the first item having an index of 0. Negative indexing can be used to access items from the end.\n\nExample:\n\n# Accessing the first item\nx = coordinates[0]  # Output: 10\n\n# Accessing the last item\nz = coordinates[-1]  # Output: 30\nModifying Tuples\nSince tuples are immutable, their contents cannot be modified. However, us can create new tuples by combining or slicing existing ones.\n\nExample:\n\n# Combining tuples\nnew_coordinates = coordinates + (40, 50)  # Result: (10, 20, 30, 40, 50)\n\n# Slicing tuples\nsub_tuple = coordinates[1:3]  # Result: (20, 30)\nTuple Methods\nTuples have a limited set of built-in methods compared to lists:\n\ncount(item): Returns the number of occurrences of the specified item.\nindex(item): Returns the index of the first occurrence of the specified item.\n\n\nExample:\n\n# Using tuple methods\nnumbers = (1, 2, 3, 1, 2, 1)\n\n# Counting occurrences of an item\ncount_1 = numbers.count(1)  # Result: 3\n\n# Finding the index of an item\nindex_2 = numbers.index(2)  # Result: 1\n\n\n\n2.4.3 Mapping Types\nMapping types in Python are used to store data in key-value pairs. Unlike sequences, mappings do not maintain an order and are designed for quick lookups of data.\n\n2.4.3.1 Dictionary (dict)\nThe primary mapping type in Python is the dict. Dictionaries store data as key-value pairs, where each key must be unique, and keys are used to access their corresponding values.\nCharacteristics of Dictionaries\n\nUnordered: The order of items is not guaranteed and may vary.\nMutable: us can add, remove, and change items after creation.\nKeys: Must be unique and immutable (e.g., strings, numbers, tuples).\nValues: Can be of any data type and can be duplicated.\n\nCreating Dictionaries\nDictionaries are created using curly braces {} with key-value pairs separated by colons :.\n\nExample:\n\n# Creating a dictionary\nstudent = {\n    \"name\": \"Alice\",\n    \"age\": 21,\n    \"major\": \"Computer Science\"\n}\nAccessing and Modifying Dictionary Items\nItems in a dictionary are accessed using their keys. us can also modify, add, or remove items.\n\nExample:\n\n# Accessing a value\nname = student[\"name\"]  # Output: \"Alice\"\n\n# Modifying a value\nstudent[\"age\"] = 22  # Updates the age to 22\n\n# Adding a new key-value pair\nstudent[\"graduation_year\"] = 2024\n\n# Removing a key-value pair\ndel student[\"major\"]\nDictionary Methods\nPython provides several built-in methods to work with dictionaries:\n\nkeys(): Returns a view object of all keys.\nvalues(): Returns a view object of all values.\nitems(): Returns a view object of all key-value pairs.\nget(key, default): Returns the value for the specified key, or a default value if the key is not found.\npop(key, default): Removes and returns the value for the specified key, or a default value if the key is not found.\n\n\nExample:\n\n# Using dictionary methods\nkeys = student.keys()        # Result: dict_keys(['name', 'age', 'graduation_year'])\nvalues = student.values()    # Result: dict_values(['Alice', 22, 2024])\nitems = student.items()      # Result: dict_items([('name', 'Alice'), ('age', 22), ('graduation_year', 2024)])\nname = student.get(\"name\")  # Result: \"Alice\"\nage = student.pop(\"age\")    # Result: 22\n\n\n\n2.4.4 Set Types\nSets are a built-in data type in Python used to store unique, unordered collections of items. They are particularly useful for operations involving membership tests, set operations, and removing duplicates.\nCharacteristics of Sets\n\nUnordered : The items in a set do not have a specific order and may change.\nMutable : us can add or remove items from a set after its creation.\nUnique : Sets do not allow duplicate items; all items must be unique.\nUnindexed : Sets do not support indexing or slicing.\n\nCreating Sets\nSets are created using curly braces {} with comma-separated values, or using the set() function.\n\nExample:\n\n# Creating a set using curly braces\nfruits = {\"apple\", \"banana\", \"cherry\"}\n\n# Creating a set using the set() function\nnumbers = set([1, 2, 3, 4, 5])\nAccessing and Modifying Set Items\nWhile us cannot access individual items by index, us can check for membership and perform operations like adding or removing items.\n\nExample:\n\n# Checking membership\nhas_apple = \"apple\" in fruits  # Output: True\n\n# Adding an item\nfruits.add(\"orange\")\n\n# Removing an item\nfruits.remove(\"banana\")  # Raises KeyError if item is not present\nSet Operations Sets support various mathematical set operations, such as union, intersection, and difference.\n\nExample:\n\n# Union of two sets\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion = set1 | set2  # Result: {1, 2, 3, 4, 5}\n\n# Intersection of two sets\nintersection = set1 & set2  # Result: {3}\n\n# Difference between two sets\ndifference = set1 - set2  # Result: {1, 2}\n\n# Symmetric difference (items in either set, but not in both)\nsymmetric_difference = set1 ^ set2  # Result: {1, 2, 4, 5}\nSet Methods\nPython provides several built-in methods for set operations:\n\nadd(item): Adds an item to the set.\nremove(item): Removes an item from the set; raises KeyError if item is not present.\ndiscard(item): Removes an item from the set if present; does not raise an error if item is not found.\npop(): Removes and returns an arbitrary item from the set.\nclear(): Removes all items from the set.\n\n\nExample:\n\n# Using set methods\nset1 = {1, 2, 3}\n\nset1.add(4)        # set1 is now {1, 2, 3, 4}\nset1.remove(2)     # set1 is now {1, 3, 4}\nset1.discard(5)    # No error, set1 remains {1, 3, 4}\nitem = set1.pop()  # Removes and returns an arbitrary item, e.g., 1\nset1.clear()      # set1 is now an empty set {}\n\n2.4.4.1 ## Frozen Sets\nFrozen sets are a built-in data type in Python that are similar to sets but are immutable. Once created, a frozen set cannot be modified, making it suitable for use as a key in dictionaries or as elements of other sets.\nCharacteristics of Frozen Sets\n\nUnordered : The items in a frozen set do not have a specific order and may change.\nImmutable : Unlike regular sets, frozen sets cannot be altered after creation. No items can be added or removed.\nUnique : Like sets, frozen sets do not allow duplicate items; all items must be unique.\nUnindexed : Frozen sets do not support indexing or slicing.\n\nCreating Frozen Sets\nFrozen sets are created using the frozenset() function, which takes an iterable as an argument.\n\nExample:\n\n# Creating a frozen set\nnumbers = frozenset([1, 2, 3, 4, 5])\n\n# Creating a frozen set from a set\nfruits = frozenset({\"apple\", \"banana\", \"cherry\"})\nAccessing and Modifying Frozen Set Items\nFrozen sets do not support modification operations such as adding or removing items. However, us can perform membership tests and other set operations.\n\nExample:\n\n# Checking membership\nhas_apple = \"apple\" in fruits  # Output: True\n\n# Since frozenset is immutable, us cannot use add() or remove() methods\nSet Operations with Frozen Sets\nFrozen sets support various mathematical set operations similar to regular sets, such as union, intersection, and difference. These operations return new frozen sets and do not modify the original ones.\n\nExample:\n\n# Union of two frozen sets\nset1 = frozenset([1, 2, 3])\nset2 = frozenset([3, 4, 5])\nunion = set1 | set2  # Result: frozenset({1, 2, 3, 4, 5})\n\n# Intersection of two frozen sets\nintersection = set1 & set2  # Result: frozenset({3})\n\n# Difference between two frozen sets\ndifference = set1 - set2  # Result: frozenset({1, 2})\n\n# Symmetric difference (items in either set, but not in both)\nsymmetric_difference = set1 ^ set2  # Result: frozenset({1, 2, 4, 5})\nFrozen Set Methods\nFrozen sets have a subset of the methods available to regular sets. The available methods include:\n\ncopy() : Returns a shallow copy of the frozen set.\ndifference(other) : Returns a new frozen set with elements in the original frozen set but not in other.\nintersection(other) : Returns a new frozen set with elements common to both frozen sets.\nunion(other) : Returns a new frozen set with elements from both frozen sets.\nsymmetric_difference(other) : Returns a new frozen set with elements in either frozen set but not in both.\n\n\nExample:\n\n# Using frozen set methods\nset1 = frozenset([1, 2, 3])\nset2 = frozenset([3, 4, 5])\n\n# Getting the difference\ndifference = set1.difference(set2)  # Result: frozenset({1, 2})\n\n# Getting the intersection\nintersection = set1.intersection(set2)  # Result: frozenset({3})\n\n# Getting the union\nunion = set1.union(set2)  # Result: frozenset({1, 2, 3, 4, 5})\n\n# Getting the symmetric difference\nsymmetric_difference = set1.symmetric_difference(set2)  # Result: frozenset({1, 2, 4, 5})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#control-structures-in-python",
    "href": "module_1.html#control-structures-in-python",
    "title": "2  Python for Linear Algebra",
    "section": "2.5 Control Structures in Python",
    "text": "2.5 Control Structures in Python\nControl structures in Python allow us to control the flow of execution in our programs. They help manage decision-making, looping, and the execution of code blocks based on certain conditions. Python provides several key control structures: if statements, for loops, while loops, and control flow statements like break, continue, and pass.\n\n2.5.1 Conditional Statements\nConditional statements are used to execute code based on certain conditions. The primary conditional statement in Python is the if statement, which can be combined with elif and else to handle multiple conditions.\n\nSyntax:\n\nif condition:\n    # Code block to execute if condition is True\nelif another_condition:\n    # Code block to execute if another_condition is True\nelse:\n    # Code block to execute if none of the above conditions are True\n\nExample: Program to classify a person based on his/her age.\n\nage = 20\n\nif age &lt; 18:\n    print(\"us are a minor.\")\nelif age &lt; 65:\n    print(\"us are an adult.\")\nelse:\n    print(\"us are a senior citizen.\")\n\n\n2.5.2 Looping Statements\nLooping statements are used to repeat a block of code multiple times. Python supports for loops and while loops.\n\n2.5.2.1 For Loop\nThe for loop iterates over a sequence (like a list, tuple, or string) and executes a block of code for each item in the sequence.\n\nSyntax:\n\nfor item in sequence:\n    # Code block to execute for each item\n\nExample: Program to print names of fruits saved in a list.\n\n# Iterating over a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\n\n2.5.2.2 While Loop\nThe while loop repeatedly executes a block of code as long as a specified condition is True.\n\nSyntax:\n\nwhile condition:\n    # Code block to execute while condition is True\n\nExample: Print all counting numbers less than 5.\n\n# Counting from 0 to 4\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n\n\n\n2.5.3 Control Flow Statements\nControl flow statements alter the flow of execution within loops and conditionals.\n\n2.5.3.1 Break Statement\nThe break statement exits the current loop, regardless of the loop’s condition.\n\nExample: Program to exit from the printing of whole numbers less than 10, while trigger 5.\n\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)\n# Output: 0 1 2 3 4\n\n\n2.5.3.2 Continue Statement\nThe continue statement skips the rest of the code inside the current loop iteration and proceeds to the next iteration.\n\nExample: Program to print all the whole numbers in the range 5 except 2.\n\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i) \n# Output: 0 1 3 4\n\n\n2.5.3.3 Pass Statement\nThe pass statement is a placeholder that does nothing and is used when a statement is syntactically required but no action is needed.\n\nExample: Program to print all the whole numbers in the range 5 except 3.\n\nfor i in range(5):\n    if i == 3:\n        pass  # Placeholder for future code\n    else:\n        print(i)\n# Output: 0 1 2 4\n\n\n\n\n\n\nCautions When Using Control Flow Structures\n\n\n\n\n\nControl flow structures are essential in Python programming for directing the flow of execution. However, improper use of these structures can lead to errors, inefficiencies, and unintended behaviors. Here are some cautions to keep in mind:\nInfinite Loops\n\nIssue: A while loop with a condition that never becomes False can lead to an infinite loop, which will cause the program to hang or become unresponsive.\nCaution: Always ensure that the condition in a while loop will eventually become False, and include logic within the loop to modify the condition.\n\nExample:\n# Infinite loop example\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    # Missing count increment, causing an infinite loop",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#functions-in-python-programming",
    "href": "module_1.html#functions-in-python-programming",
    "title": "2  Python for Linear Algebra",
    "section": "2.6 Functions in Python Programming",
    "text": "2.6 Functions in Python Programming\nFunctions are a fundamental concept in Python programming that enable code reuse, modularity, and organization. They allow us to encapsulate a block of code that performs a specific task, which can be executed whenever needed. Functions are essential for writing clean, maintainable, and scalable code, making them a cornerstone of effective programming practices.\nWhat is a Function?\nA function is a named block of code designed to perform a specific task. Functions can take inputs, called parameters or arguments, and can return outputs, which are the results of the computation or task performed by the function. By defining functions, us can write code once and reuse it multiple times, which enhances both efficiency and readability.\nDefining a Function\nIn Python, functions are defined using the def keyword, followed by the function name, parentheses containing any parameters, and a colon. The function body, which contains the code to be executed, is indented below the function definition.\n\nSyntax:\n\ndef function_name(parameters):\n    # Code block\n    return result\n\nExample:\n\ndef greet(name):\n    \"\"\"\n    Returns a greeting message for the given name.\n    \"\"\"\n    return f\"Hello, {name}!\"\n\n2.6.0.1 Relevance of functions in Programming\n\nCode Reusability : Functions allow us to define a piece of code once and reuse it in multiple places. This reduces redundancy and helps maintain consistency across our codebase.\nModularity : Functions break down complex problems into smaller, manageable pieces. Each function can be focused on a specific task, making it easier to understand and maintain the code.\nAbstraction : Functions enable us to abstract away the implementation details. We can use a function without needing to know its internal workings, which simplifies the code we write and enhances readability.\nTesting and Debugging : Functions allow us to test individual components of our code separately. This isolation helps in identifying and fixing bugs more efficiently.\nLibrary Creation : Functions are the building blocks of libraries and modules. By organizing related functions into libraries, we can create reusable components that can be shared and utilized across different projects.\n\n\nExample: Creating a Simple Library\n\nStage 1: Define Functions in a Module\n# my_library.py\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of two numbers.\n    \"\"\"\n    return a + b\n\ndef multiply(a, b):\n    \"\"\"\n    Returns the product of two numbers.\n    \"\"\"\n    return a * b\nStage 2: Use the Library in Another Program\n# main.py\n\nimport my_library\n\nresult_sum = my_library.add(5, 3)\nresult_product = my_library.multiply(5, 3)\n\nprint(f\"Sum: {result_sum}\")\nprint(f\"Product: {result_product}\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#object-oriented-programming-oop-in-python",
    "href": "module_1.html#object-oriented-programming-oop-in-python",
    "title": "2  Python for Linear Algebra",
    "section": "2.7 Object-Oriented Programming (OOP) in Python",
    "text": "2.7 Object-Oriented Programming (OOP) in Python\nObject-Oriented Programming (OOP) is a programming paradigm that uses “objects” to design and implement software. It emphasizes the organization of code into classes and objects, allowing for the encapsulation of data and functionality. OOP promotes code reusability, scalability, and maintainability through key principles such as encapsulation, inheritance, and polymorphism.\n\n2.7.1 Key Concepts of OOP\n\nClasses and Objects\n\n\nClass: A class is a blueprint for creating objects. It defines a set of attributes and methods that the created objects will have. A class can be thought of as a template or prototype for objects.\nObject: An object is an instance of a class. It is a specific realization of the class with actual values for its attributes.\n\n\n2.7.1.1 Example\n# Defining a class\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name  # Attribute\n        self.age = age    # Attribute\n    \n    def bark(self):\n        return \"Woof!\"   # Method\n\n# Creating an object of the class\nmy_dog = Dog(name=\"Buddy\", age=3)\n\n# Accessing attributes and methods\nprint(my_dog.name)  # Output: Buddy\nprint(my_dog.age)   # Output: 3\nprint(my_dog.bark())  # Output: Woof!\n\nEncapsulation\n\nEncapsulation is the concept of bundling data (attributes) and methods (functions) that operate on the data into a single unit, or class. It restricts direct access to some of the object’s components and can help protect the internal state of the object from unintended modifications.\n\nExample: Controll the access to member variables using encapsulation.\n\nclass Account:\n    def __init__(self, balance):\n        self.__balance = balance  # Private attribute\n    \n    def deposit(self, amount):\n        if amount &gt; 0:\n            self.__balance += amount\n    \n    def get_balance(self):\n        return self.__balance\n\n# Creating an object of the class\nmy_account = Account(balance=1000)\nmy_account.deposit(500)\n\nprint(my_account.get_balance())  # Output: 1500\n# print(my_account.__balance)  # This will raise an AttributeError\n\nInheritance\n\nInheritance is a mechanism in which a new class (child or derived class) inherits attributes and methods from an existing class (parent or base class). It allows for code reuse and the creation of a hierarchy of classes.\n\nExample: Demonstrating usage of attributes of base class in the derived classes.\n\n# Base class\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n    \n    def speak(self):\n        return \"Some sound\"\n\n# Derived class\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)  # Calling the constructor of the base class\n        self.breed = breed\n    \n    def speak(self):\n        return \"Woof!\"\n\n# Another derived class\nclass Cat(Animal):\n    def __init__(self, name, color):\n        super().__init__(name)  # Calling the constructor of the base class\n        self.color = color\n    \n    def speak(self):\n        return \"Meow!\"\n\n# Creating objects of the derived classes\ndog = Dog(name=\"Buddy\", breed=\"Golden Retriever\")\ncat = Cat(name=\"Whiskers\", color=\"Gray\")\n\nprint(f\"{dog.name} is a {dog.breed} and says {dog.speak()}\")  # Output: Buddy is a Golden Retriever and says Woof!\nprint(f\"{cat.name} is a {cat.color} cat and says {cat.speak()}\")  # Output: Whiskers is a Gray cat and says Meow!\n\nPolymorphism\n\nPolymorphism allows objects of different classes to be treated as objects of a common superclass. It enables a single interface to be used for different data types. In Python, polymorphism is often achieved through method overriding, where a method in a derived class has the same name as a method in the base class but implements different functionality.\n\nExample:\n\nclass Bird:\n    def fly(self):\n        return \"Flies in the sky\"\n\nclass Penguin(Bird):\n    def fly(self):\n        return \"Cannot fly, swims instead\"\n\n# Creating objects of different classes\nbird = Bird()\npenguin = Penguin()\n\nprint(bird.fly())      # Output: Flies in the sky\nprint(penguin.fly())  # Output: Cannot fly, swims instead",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#working-with-files-in-python",
    "href": "module_1.html#working-with-files-in-python",
    "title": "2  Python for Linear Algebra",
    "section": "2.8 Working with Files in Python",
    "text": "2.8 Working with Files in Python\nFile handling is an essential part of programming that allows us to work with data stored in files. Python provides built-in functions and methods to create, read, write, and manage files efficiently. This section will cover basic file operations, including opening, reading, writing, and closing files.\nOpening a File\nIn Python, we use the open() function to open a file. This function returns a file object, which provides methods and attributes to interact with the file. The open() function requires at least one argument: the path to the file. we can also specify the mode in which the file should be opened.\n\nSyntax:\n\nfile_object = open(file_path, mode)\nWhere,\n\nfile_path : Path to the file (can be a relative or absolute path).\nmode : Specifies the file access mode (e.g., ‘r’ for reading, ‘w’ for writing, ‘a’ for appending).\n\n\nExample:\n\n# Opening a file in read mode\nfile = open('example.txt', 'r')\nReading from a File\nOnce a file is opened, we can read its contents using various methods. Common methods include read(), readline(), and readlines().\n\nread() : Reads the entire file content.\nreadline() : Reads a single line from the file.\nreadlines() : Reads all the lines into a list.\n\n\nExample:\n\n# Reading the entire file\nfile_content = file.read()\nprint(file_content)\n\n# Reading a single line\nfile.seek(0)  # Move cursor to the start of the file\nline = file.readline()\nprint(line)\n\n# Reading all lines\nfile.seek(0)\nlines = file.readlines()\nprint(lines)\nWriting to a File\nTo write data to a file, we need to open the file in write (‘w’) or append (‘a’) mode. When opened in write mode, the file is truncated (i.e., existing content is deleted). When opened in append mode, new data is added to the end of the file.\n\nExample:\n\n# Opening a file in write mode\nfile = open('example.txt', 'w')\n\n# Writing data to the file\nfile.write(\"Hello, World!\\n\")\nfile.write(\"Python file handling example.\")\n\n# Closing the file\nfile.close()\nClosing a File\nIt is important to close a file after performing operations to ensure that all changes are saved and resources are released. We can close a file using the close() method of the file object.\n\nExample:\n\nf_1 = open('example.txt', 'w') # open the file example.txt to f_1\nf_1.close() # close the file with handler 'f_1'\nUsing Context Managers\nContext managers provide a convenient way to handle file operations, automatically managing file opening and closing. We can use the with statement to ensure that a file is properly closed after its block of code is executed.\n\nExample:\n\n# Using context manager to open and write to a file\nwith open('example.txt', 'w') as file:\n    file.write(\"This is written using a context manager.\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#from-theory-to-practice",
    "href": "module_1.html#from-theory-to-practice",
    "title": "2  Python for Linear Algebra",
    "section": "2.9 From Theory to Practice",
    "text": "2.9 From Theory to Practice\nIn this section, we transition from theoretical concepts to practical applications by exploring how fundamental matrix operations can be used in the field of image processing. By leveraging the knowledge gained from understanding matrix addition, subtraction, multiplication, and other operations, we can tackle real-world problems such as image blending, sharpening, filtering, and transformations. This hands-on approach not only reinforces the theoretical principles but also demonstrates their utility in processing and enhancing digital images. Through practical examples and coding exercises, you’ll see how these mathematical operations are essential tools in modern image manipulation and analysis.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "module_1.html#conclusion",
    "href": "module_1.html#conclusion",
    "title": "2  Python for Linear Algebra",
    "section": "2.10 Conclusion",
    "text": "2.10 Conclusion\nIn this chapter, we transitioned from understanding fundamental matrix operations to applying them in practical scenarios, specifically in the realm of image processing. We began by covering essential matrix operations such as addition, subtraction, multiplication, and determinant calculations, providing both pseudocode and detailed explanations. This foundational knowledge was then translated into Python code, demonstrating how to perform these operations computationally.\nWe further explored the application of these matrix operations to real-world image processing tasks. By applying techniques such as image blending, sharpening, filtering, and transformation, we illustrated how theoretical concepts can be used to manipulate and enhance digital images effectively. These practical examples highlighted the significance of matrix operations in solving complex image processing challenges.\nBy integrating theoretical understanding with practical implementation, this chapter reinforced how matrix operations form the backbone of many image processing techniques. This blend of theory and practice equips you with essential skills for tackling advanced problems and developing innovative solutions in the field of image processing and beyond.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python for Linear Algebra</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]